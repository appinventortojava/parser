/*
   appinventor-java-translation

   Originally authored by Joshua Swank at the University of Alabama
   Work supported in part by NSF award #0702764 and a Google 2011 CS4HS award

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package org.translator.java;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;

import org.translator.java.code.ClassSegment;
import org.translator.java.code.SourceFile;
import org.translator.parser.*;
import org.translator.parser.Token;


/**
 * 
 * @authors Aaron Halbleib
 */
/* this file takes a .yail file as input, parses it, and organizes the information therein into data structures
 * so that it can be translated into java code. In order to tokenize the yail file, it uses classes auto generated by
 * the program javacc. 
 * 
 */
//if you return a choose from a procedure the java will be wrong. also if you use a choose
//as the start for a forrange loop. this is because a choose is exactly the same as an if else
//in the yail file
/*list of things not yet implemented (can't guarantee 100% correctness), organized by App Inventor Category and name:
 * 
 * Definition:
 * ProcedureWithResult
 * 
 * Text:
 * is text empty?
 * text<
 * text>
 * trim
 * upcase
 * downcase
 * starts at
 * contains
 * split at first
 * split at first of any
 * split
 * split at any
 * split at spaces
 * segment
 * replace all
 * List:
 * replace list item
 * select list item
 * insert list item
 * length of list
 * append to list
 * is in list?
 * pick random item
 * is list empty?
 * copy list
 * is a list?
 * list to csv row
 * list to csv table
 * list from csv row
 * list from csv table
 * 
 * Math:
 * sqrt
 * random set seed
 * negate
 * min 
 * max
 * quotient
 * remainder
 * modulo
 * abs 
 * round
 * floor
 * ceiling
 * expt
 * exp
 * log
 * sin 
 * cos
 * tan
 * asin
 * acos
 * atan
 * atan2
 * convert radians to degrees
 * convert degrees to radians
 * format as decimal
 * is a number
 * 
 * Control:
 * while
 * for range
 * choose
 * open another screen
 * open another screen with start value
 * get start value
 * close screen
 * close screen with value
 * close application
 * get plain start text
 * close screen with plain text
 * 
 * 
 */
//test plan: test procedures with args and result in lots of situations
public class AppInventorScreen {
	int choose=0;
	//r stands for Random. if it is false, we have not yet added a random number generator to the variables list.
	//when an operation requiring a random number generator (so far only Random Integer) is encountered we will add te
	//a Random random to the variables list and set r to true, and then use that random object for all subsequent
	//random number generation(if any)
	boolean r;
	private String screenName;
	private String packageName;
	private JavaGenerator form;
	//components, or structures in app inventor which have direct javabridge counterparts
	private HashMap<String, AppComponent> components;
	//events, which are denoted by the keyword define-event in the .yail
	private ArrayList<CodeBlock> events;
	//user defined methods, signified by the keyword "def" in the .yail
	private ArrayList<Method> methods;
	//this is where App Inventor "primitive types": numbers, text, and lists 
	//all of which are also denoted using the keyword "def" in the .yail
	private ArrayList<JVar> variables;
	private String yailFile;
	private YailParserTokenManager yailParserTokenManager;

	protected AppInventorScreen(String screenName, InputStream inputStream, String yailFile)

			throws IOException {
		r=false;
		this.yailFile = yailFile;
		this.screenName = screenName;
		methods = new ArrayList<Method>();
		variables = new ArrayList<JVar>();
		components = new HashMap<String, AppComponent>();
		events = new ArrayList<CodeBlock>();
		yailParserTokenManager = 
				new YailParserTokenManager(new SimpleCharStream(inputStream));

	}

	protected SourceFile generateJavaFile() {
		//class which contains generated code. its toString method
		//provides the complete source after JavaGenerator.generateCode() is called here
		SourceFile file = new SourceFile(
				TranslatorConstants.PACKAGE_PREFIX.concat(packageName
						.toLowerCase()));

		form = new JavaGenerator(screenName, components, events, variables,
				methods);
		if (form != null)
			file.setMainClass((ClassSegment) form.generateCode());

		return file;
	}

	protected String getPackageName(){
		return packageName;
	}

	protected void genManifest(ArrayList<String> screenNames, HashMap<String, Boolean> permissions) {
		screenNames.add(screenName);
		HashMap<String, AppComponent> hm = components;
		for (String s : hm.keySet()){
			AppComponent ac=hm.get(s);
			if (ac.getType().contentEquals("Sound")){
				permissions.put(EclipseFileGen.VIBARTE_PERM_TXT, true);
			}
			else if(ac.getType().contentEquals("Texting")){
				permissions.put(EclipseFileGen.TEXT_PERM_TXT, true);
			}
			else if (ac.getType().contentEquals("Web")){
				permissions.put(EclipseFileGen.INTERNET_PERM_TXT, true);
			}
			else if (ac.getType().contentEquals("Camera")) {
				permissions.put(EclipseFileGen.CAMERA_PERM_TXT, true);
			}
			else if (ac.getType().contentEquals("ListPicker")) {
				permissions.put(EclipseFileGen.LISTPICKER_TXT, true);
			}
		}
	}


	protected void loadYailFile() throws IOException {

		YailParser yailParser = 
				new YailParser(new FileInputStream(yailFile));

		try {
			yailParser.program();
			packageName = "blank";
			packageName = yailParser.getPackageName();
			components = yailParser.getComponents();
			variables = yailParser.getVariablesArray();
			events = yailParser.getEvents();
			methods = yailParser.getMethods();

		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

	public String getName() {
		return screenName;
	}

}
