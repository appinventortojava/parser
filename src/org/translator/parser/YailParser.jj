options
{
  STATIC = false;
  IGNORE_CASE = false;
}

PARSER_BEGIN(YailParser)

package org.translator.parser;
import org.translator.java.AppComponent;
import java.util.HashMap;
import java.util.ArrayList;
import org.translator.java.JVar;
import org.translator.java.CodeBlock;
import org.translator.java.ComponentCall;
import org.translator.java.IfStatement;
import org.translator.java.ForEach;
import org.translator.java.ForRange;
import org.translator.java.WhileLoop;
import org.translator.java.Method;

public class YailParser
{
  static String packageName = "blank";
  HashMap<String, AppComponent> components = new HashMap<String, AppComponent>();
  ArrayList<JVar> variables = new ArrayList<JVar>();
  ArrayList<CodeBlock> events = new ArrayList<CodeBlock>();
  ArrayList<Method > methods = new ArrayList<Method >();
  HashMap<String, ArrayList<String >> lookUps = new HashMap<String, ArrayList<String >>(); //Delete this
  {
    try 
    {
      buildTable();
    } 
    catch (ParseException e) 
    {
      e.printStackTrace();
    }
  }
  CodeBlock codeBlock;
  boolean isSubEvent; //is in a code block
  boolean hasElse;
  boolean hasRandom; //check to see if an instance of random has been created
  boolean isParam; //check to see if line is a param of a function or a new function call
  String parentEvent; //may be useless
  ComponentCall globalCall;   //global vars
}

PARSER_END(YailParser)

TOKEN_MGR_DECLS :
{
}

SKIP :
{
  < " " >
| < "\n" >
| < "\r" >
| < "\t" >
| < "//" (~[ "\n" ])* "\n" >
}

TOKEN :
{
 < ABS : "abs" >
| < ACOS : "acos-degrees" >
| < ADDCOMP : "add-component" >
| < APOS : "'" >
| < ASIN : "asin-degrees" >
| < ATAN : "atan-degrees" >
| < ATAN2 : "atan2-degrees" >
| < AND : "and-delayed" >
| < OR : "or-delayed" >
| < BEGIN : "begin" >
| < CALLCOMP : "call-component-method" >
| < CALLPRIM : "call-yail-primitive" >
| < CEILING : "yail-ceiling" >
| < CLOSESCREEN : "close-screen" >
| < CLOSEAPP : "close-application" >
| < CLOSESCREENPLAINTEXT : "close-screen-with-plain-text" >
| < CLOSESCREENWITHVALUE : "close-screen-with-value" >
| < COLORVAL :
    "#x"
    (
      [ "F" ]
    | [ "C" ]
    | [ "0" - "9" ]
    )* >
| < DECIMALVAL :
    ([ "-" ])? ([ "." ])?  ([ "0"-"9" ])+
    (
      [ "." ] ([ "0"-"9" ])+
    )? >
| < CONVDEGTORADI : "degrees->radians" >
| < CONVRADITODEG : "radians->degrees" >
| < COS : "cos-degrees" >
| < DEF : "def" >
| < DEFINEEVENT : "define-event" >
| < DEFINEFORM : "define-form" >
| < DIVIDE : "yail-divide" >
| < DOAFTERFORM : "do-after-form-creation" >
| < EXP : "exp" >
| < EXPT : "expt" >
| < EQUAL : "=" >
| < FLOOR : "yail-floor" >
| < FOREACH : "foreach" >
| < FORMATASDEC : "format-as-decimal" >
| < FORMNAME :
    ([ "a"-"z" ])+
    (
      "."
      (
        [ "A"-"Z", "a"-"z", "0"-"9" ]
      | "_"
      )+
    )+ >
| < FORRANGE : "forrange" >
| < FSLASH : "\\" >
| < GETPROP : "get-property" >
| < GETPLAINSTARTTEXT : "get-plain-start-text" >
| < GETSTARTVALUE : "get-start-value" >
| < GETVAR : "get-var" >
| < GETCOMPONENT : "get-component" >
| < GREATER : ">" >
| < IF : "if" >
| < INITRUN : "init-runtime" >
| < ISANUM : "is-number?" >
| < LESS : "<" >
| < LEXVAL : "lexical-value" >
| < LIST : "list" >
| < LISTFORRUNTIME : "*list-for-runtime*" >
| < LISTINIT : "\"make a list\"" >
| < LPAREN : "(" >
| < LOG : "log" >
| < MAKELIST : "make-yail-list" >
| < MAX : "max" >
| < MIN : "min" >
| < MINUS : "-" >
| < MOD : "modulo" >
| < MULTIPLY : "*" >
| < OPENANOTHERSCREEN : "open-another-screen" >
| < OPENANOTHERSCREENWITHVALUE : "open-another-screen-with-start-value" >
| < PACKAGE : "<com.google.youngandroid.runtime>" >
| < PLUS : "+" >
| < PROPTYPE : "'" ([ "a"-"z" ])+ >
| < PROPNAME : "'" [ "A"-"Z" ] ([ "0"-"9", "a"-"z", "A"-"Z" ])* >
| < QUOTE : "\"" >
| < QUOTIENT : "quotient" >
| < RANDFRAC : "random-fraction" >
| < RANDINT : "random-integer" >
| < RANDOMSETSEED : "random-set-seed" >
| < REMAINDER : "remainder" >
| < REQUIRE : "require" >
| < ROUND : "yail-round" >
| < RPAREN : ")" >
| < RUNTIMEVAL : "#f" >
| < SETPROP : "set-and-coerce-property!" >
| < SETTHISFORM : "set-this-form" >
| < SETVAR : "set-var!" >
| < SIN : "sin-degrees" >
| < SQUAREROOT : "sqrt" >
| < STRAPPEND : "string-append" >
| < STRCONTAINS : "string-contains" >
| < STREMPTY : "string-empty?" >
| < STRGREATER : "string>?" >
| < STRLEN : "string-length" >
| < STRLESS : "string<?" >
| < STRREPLACEALL : "string-replace-all" >
| < STRSPLIT : "string-split" >
| < STRSPLITANY : "string-split-at-any" >
| < STRSPLITFIRST : "string-split-at-first" >
| < STRSPLITFIRSTANY : "string-split-at-first-of-any" >
| < STRSPLITSPACES : "string-split-at-spaces" >
| < STRSTARTAT : "string-starts-at" >
| < STRSUBSTRING : "string-substring" >
| < STRTOLOWER : "string-to-lower-case" >
| < STRTOUPPER : "string-to-upper-case" >
| < STRTRIM : "string-trim" >
| < TAN : "tan-degrees" >
| < TRIPLE : ";;;" >
| < TRUE: "#t" >
| < WHILE : "while" >
| < YAILADDTOLIST : "yail-list-add-to-list!" >
| < YAILEQUAL : "yail-equal?" >
| < YAILGETITEM : "yail-list-get-item" >
| < YAILISALIST : "yail-list?" >
| < YAILLISTAPPEND : "yail-list-append!" >
| < YAILLISTCOPY : "yail-list-copy" >
| < YAILLISTINSERT : "yail-list-insert-item!" >
| < YAILLISTLENGTH : "yail-list-length" >
| < YAILLISTMEMBER : "yail-list-member?" >
| < YAILLISTREMOVE : "yail-list-remove-item!" >
| < YAILLISTFROMCSVROW : "yail-list-from-csv-row" >
| < YAILLISTFROMCSVTABLE : "yail-list-from-csv-table" >
| < YAILLISTINDEX : "yail-list-index" >
| < YAILLISTRANDOM : "yail-list-pick-random" >
| < YAILLISTSETITEM : "yail-list-set-item!" >
| < YAILLISTTOCSVROW : "yail-list-to-csv-row" >
| < YAILLISTTOCSVTABLE : "yail-list-to-csv-table" >
| < COMPNAME : ([ "A"-"Z", "0"-"9", "a"-"z", ":", "!", "-" ])+ >
| < ANYTEXT :
    [ "\"" ]
    (
      ~[ "\"" ]
    | "\\\""
    )*
    [ "\"" ] >
}

SKIP :
{
  < "#|" >
  {
    SwitchTo(IN_DECL);
  }
}

< IN_DECL >
SKIP :
{
  < ~[ ] >
| < "|#" >
  {
    SwitchTo(DEFAULT);
  }
}

/*
 * Non-Terminal for Adding Components
 */
void addComp() :
{
  Token parentName = null; 
  Token compType = null; 
  Token compName = null;
}
{ 
    < ADDCOMP > parentName = < COMPNAME > compType = < COMPNAME > compName = < COMPNAME >
    {
      AppComponent appComponent = new AppComponent(parentName.image);
      appComponent.setType(compType.image);
      appComponent.setComponentName(compName.image);
      components.put(appComponent.getComponentName(), appComponent);
    }
}

/*
 * Non-Terminal for Component Bodies
 */
void addComps() :
{}
{
  addComp() compSet()
}

/*
 * Non-Terminal for After Form Framework
 */
void afterFormBody() : 
{}
{
  < LPAREN > afterFormBodyS() < RPAREN >
}

/*
 * Helper Function for afterFormBody()
 */
void afterFormBodyS() : //possible after form bodies
{}
{
  setProp()
}

/*
 * Non-Terminal for ConditionalBodies
 */
void beginBody() :
{}
{
  < LPAREN > < BEGIN > eventBody() (< ANYTEXT >)?  < RPAREN > 
}

/*
 * Non-Terminal for Calling Components
 */
ArrayList callComponents() :
{
  Token propName; 
  Token callName; 
  ArrayList paramList = new ArrayList(); 
  ArrayList propValObject = new ArrayList();
}
{
  < CALLCOMP > propName = < PROPNAME > callName = < PROPNAME > paramList = listParams() setPropType()
  {
    ComponentCall compCall = new ComponentCall(propName.image.replace("'",""));
    compCall.setMethod(callName.image.replace("'",""));
    if (paramList.size() > 1)
    {
      for(int i = 0; i < paramList.size(); i++)
      { 
        compCall.addArgument(((ArrayList)paramList.get(i)).get(0).toString());
      }
    }
    else if(paramList.size() == 1) 
      compCall.addArgument(((ArrayList)paramList.get(0)).get(0).toString());

    if(!isSubEvent)
      codeBlock.addCall(compCall);

    String call = propName.image.replace("'","") + "." + callName.image.replace("'","") + "(";

    for(Object list : paramList)
    {
      call = call + ((ArrayList)list).get(0).toString();
    }
    call = call + ")";
    propValObject.add(call);

    return propValObject;
  }
}

/*
 * Non-Terminal for Component Bodies
 */
void compBody() :
{}
{
  
  addComps()
| defEvent()
| doAfterForm()
| initRun()
}

/*
 * Non-Terminal for Component Bodies
 */
void compBodyS() :
{}
{
  < LPAREN > compBody() < RPAREN > compBodyS()
|
  {}
}

/*
 * Non-Terminal for Component Definitions
 */
void compDef() :
{codeBlock = null;}
{
  < TRIPLE > < COMPNAME > compBodyS() compDefs()
}

/*
 * Non-Terminal for Multiple Component Definitions
 */
void compDefs() :
{}
{
  compDef()
|
  {}
}

/*
 * Non-Terminal for Setting Properties in addComps
 */
void compSet() :
{}
{
  < LPAREN > setProp() < RPAREN > compSet()
|
  {}
}

/*
 * Non-Terminal for Zero of more defintions
 */
void defs() :
{}
{
  def()
|
  {}
}

/*
 * Non-Terminal for definitions
 */
void def() : 
{}
{
  < LPAREN > < DEF > defP() < RPAREN > defs()
}

/*
 * Non-Terminal for definitions
 */
void defP() :
{}
{
  funcDef()
| varDef()
}

/*
 * Non-Terminal for Define-Event
 */
void defEvent() :
{}
{
  defEventHeader() eventBody()
}

/*
 * Non-Terminal for Define-Event Header
 */
CodeBlock defEventHeader() : 
{
  Token compName; 
  Token methodName; 
  isSubEvent = true;
}
{
  < DEFINEEVENT > compName = < COMPNAME > methodName = < COMPNAME >
	{
    codeBlock = new CodeBlock(compName.image); 
    codeBlock.setMethod(methodName.image);
  }
    < LPAREN > eventParams() < RPAREN >
  {
    if(components.get(codeBlock.getComponent()) != null)
      setParamTypes(components.get(codeBlock.getComponent()).getType(), codeBlock.getMethod());
    events.add(codeBlock);
  
    isSubEvent = false; 
    return codeBlock;
  }
}

/*
 * Non-Terminal for Setting Parameters types
 */
void setParamTypes(String type, String method) :
{}
{
  {

    if(method.contentEquals("MessageReceived") && type.contentEquals("Texting"))
    {
      codeBlock.addArgType("(String)");
      codeBlock.addArgType("(String)");
    }
    else if(method.contentEquals("AfterPicture") && type.contentEquals("Camera"))
    {
      codeBlock.addArgType("(String)");
    }
    else if(method.contentEquals("Dragged") && type.contentEquals("Canvas"))
    {
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Boolean)");
    }
    else if(method.contentEquals("Touched") && type.contentEquals("Canvas"))
    {
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Boolean)");
    }
    else if(method.contentEquals("Touched") && type.contentEquals("ImageSprite"))
    {
      codeBlock.addArgType("(Float)");
      codeBlock.addArgType("(Float)");
    }
    else if(method.contentEquals("LocationChanged") && type.contentEquals("LocationSensor"))
    {
      codeBlock.addArgType("(Double)");
      codeBlock.addArgType("(Double)");
      codeBlock.addArgType("(Double)");
    }
	}
}

/*
 * Non-Terminal for Define-form
 */
void defineForm() :
{
  Token packageNameToken;
}
{
  < LPAREN > < DEFINEFORM > packageNameToken = < FORMNAME > < COMPNAME > < RPAREN >
  {
    packageName = packageNameToken.image.toString().substring(0, packageNameToken.image.lastIndexOf("."));
  }
}

/*
 * Non-Terminal for Do after form creation
 */
void doAfterForm() :
{}
{
  < DOAFTERFORM > (afterFormBody())+
}

/*
 * Non-Terminal for zero or more event body frame
 */
void eventBody() :
{}
{
  < LPAREN > (eventBodyS() {isParam = true;})+ {isParam = false; if(globalCall != null)codeBlock.addCall(globalCall); globalCall = null;} < RPAREN > eventBody()
|
  {}
}

/*
 * Non-Terminal for event body frame
 */
String eventBodyS() :
{
  Token t = null; 
  ArrayList propValObject;
}
{
  callComponents() {return null;}
| forEachBlock() {return null;}
| forRangeBlock() {return null;}
| t = getVarProp() {if (t != null) return t.image; else return "";}
| propValObject = propVal(false) 
  { 
    if(propValObject.get(0) instanceof ArrayList)
      return ((ArrayList)propValObject.get(0)).get(0).toString();
    else
      return propValObject.get(0).toString();
  }
| ifBlock() {return null;}
| setProp() {return null;}
| setThisForm() {return null;}
| setVariables() {return null;}
| yailControlWhile() {return null;}
| yailPrims () {return null;}
}

/*
 * Non-Terminal for event params
 */
void eventParams() :
{
  Token param;
}
{
  param = < COMPNAME > 
  {
    codeBlock.addArg(param.image);
  } 
  eventParams()
|
  {}
}

/*
 * Non-Terminal for function bodies
 */
void funcBody() :
{}
{
  eventBody() 
}

/*
 * Non-Terminal for function bodies
 */
void funcBodyS() :
{}
{
  eventBodyS()
}

/*
 * Non-Terminal for function defintions
 */
void funcDef() :
{}
{
  funcName() funcBody()
}

/*
 * Non-Terminal for function names
 */
void funcName() :
{
  Token compName; 
  Token arg; 
  ArrayList<String > argList = new ArrayList<String >();
}
{
  < LPAREN > compName = < COMPNAME >   ((arg = < COMPNAME > | arg = < LIST >){argList.add(arg.image);})* < RPAREN >
  {
    codeBlock = new CodeBlock("method");
    codeBlock.setB1(true);
    methods.add(new Method(compName.image, codeBlock, argList));
  }
}

/*
 * Non-Terminal for call to get property
 */
ArrayList getProp(boolean flag) :
{
  ArrayList propValObject = new ArrayList(); 
  Token compName; 
  Token propName;
}
{
  //Might have to get rid of '
  < GETPROP > compName = < PROPNAME > propName = < PROPNAME >
  {
    String getProperty = compName.image.replace("'", "") + "." + propName.image.replace("'", "") + "()";
    propValObject.add(getProperty);
    if(flag)
    {
      if(isParam) 
        globalCall.addArgument(getProperty);
  	}
  	return propValObject;
  }
}

/*
 * Non-Terminal for call to get variable
 */
Token getVar() :
{
  Token compName;
}
{
  (< GETVAR > | < GETCOMPONENT > | < LEXVAL >) compName = < COMPNAME >  {
	
    return compName;}
}

/*
 * Non-Terminal for getting variable properties
 */
Token getVarProp() :
{
  Token listName = null; 
  ArrayList argsList; 
  ArrayList propValObject;
}
{
  < LPAREN > (listName = getVariables(true) | getProp(true) | propValObject = variables()) < RPAREN >
  (argsList = propVal(false) {globalCall.addArgument(argsList.get(0).toString());})*
  {
    return listName;
  }
}

/*
 * Non-Terminal for getting variables
 */
Token getVariables(boolean flag) :
{
  Token listName;
}
{
  < GETVAR > listName = < COMPNAME > /*add args */
  { //Might be a problem
    if(flag)
    {
      if(!isParam)
      {  
        ComponentCall compCall = new ComponentCall("");
        compCall.setMethod(listName.image);
        globalCall = compCall;
      }
      else
      {
        globalCall.addArgument(listName.image);
      }
    }
    return listName;
  }
}

/*
 * Non-Terminal for headers
 */
void headers() :
{}
{
  defineForm() requires()
}

void ifBlock() : //if statements
{
  String operator; 
  CodeBlock mainBlock = codeBlock; 
  CodeBlock elseBlock; 
  isSubEvent = true;
}
{
  {
    mainBlock.addCall(new ComponentCall("if", ""));
    codeBlock = new CodeBlock("if");
  }
  < IF > operator = ifTest()
  beginBody()
  {
    IfStatement ifStat = new IfStatement(null, null, operator, codeBlock);
  }
  ({codeBlock = new CodeBlock("else");} beginBody() {ifStat.setElseNoCon(codeBlock);})?
  {
    mainBlock.addIf(ifStat);
    codeBlock = mainBlock;
    isSubEvent = false;
  }
}

/*
 * Non-Terminal for For Each blocks
 */
void forEachBlock() :
{
  CodeBlock mainBlock = codeBlock; 
  Token var; 
  String type = "String"; 
  String listName;
}
{
  {
    mainBlock.addCall(new ComponentCall("foreach", "")); 
    codeBlock = new CodeBlock("foreach");
  }
  < FOREACH > var = < COMPNAME > beginBody() listName = eventBodyS()
  {
    mainBlock.addForEach(new ForEach(type, listName, var.image, codeBlock));
    codeBlock = mainBlock;
  }
}

/*
 * Non-Terminal for For Range blocks
 */
void forRangeBlock() :
{
  CodeBlock mainBlock = codeBlock; 
  Token var; 
  Token increment; 
  Token end; 
  Token start;
}
{
  {
    mainBlock.addCall(new ComponentCall("forrange", "")); 
    codeBlock = new CodeBlock("forrange");
  }
  < FORRANGE > var = < COMPNAME > beginBody() increment = < DECIMALVAL > end = < DECIMALVAL > start = < DECIMALVAL >
  {
    mainBlock.addForRange(new ForRange(var.image, increment.image, end.image, start.image, codeBlock));
    codeBlock = mainBlock;
  }
}

/*
 * Non-Terminal for If Test blocks
 */
String ifTest() :
{
  Token test; 
  ArrayList paramList = new ArrayList(); 
  String operators;
}
{
  < LPAREN > (paramList = yailPrims() | paramList = getProp(true) | operators = ifTests() {paramList.add(operators);})
  < RPAREN > {return paramList.get(0).toString();}
| test = < TRUE > { return "true"; }
| test = < RUNTIMEVAL > { return "false"; }
}

/*
 * Non-Terminal for multiple if tests
 */
String ifTests() :
{
  String condition1; 
  String condition2; 
  String operator;
}
{
 	( < AND > {operator = "&&";}| < OR > {operator = "||";}) condition1 = ifTest() condition2 = ifTest()
 	{
    return condition1 + operator + condition2;
  }
}

/*
 * Non-Terminal for init-runtime
 */
void initRun() :
{}
{
  < INITRUN > (< RUNTIMEVAL >)?
}

/*
 * Non-Terminal for lists parameters
 */
ArrayList listParams() :
{
  ArrayList paramList = new ArrayList(); 
  ArrayList propValObject;
}
{
  < LPAREN > (< LIST > | < LISTFORRUNTIME >)
  (
    propValObject = propVal(false)
    {
      
      paramList.add(propValObject);
    }
  )*
  < RPAREN >
  {
    return paramList;
  }
}

/*
 * Non-Terminal for Lists
 */
ArrayList listStuff() :
{
  Token t; 
  ArrayList paramList = new ArrayList(); 
  ArrayList propValObject;
}
{
  (< LIST > | < LISTFORRUNTIME >) ((propValObject = propVal(true) {paramList.add(propValObject);})*
    (propValObject = listStuffP() {paramList.add(propValObject);})?)
  { return paramList; }
  //either gives the name of the list (< ANYTEXT >) or creates a new list (The first choice)
}

/*
 * Non-Terminal for Lists
 */
ArrayList listStuffP() :
{
  ArrayList propValList = new ArrayList();
}
{
  (< LPAREN > propValList = listStuffS() < RPAREN >
    ((< LPAREN > propValList = listStuffS() < RPAREN >) | < DECIMALVAL > )? (< ANYTEXT >)?)
  {
    return propValList;
  }
}

/*
 * Non-Terminal for Lists
 */
ArrayList listStuffS() :
{
  ArrayList propValList = null;
}
{
  propValList = compVal() {return propValList;}
| propValList = getProp(true) {return propValList;}
| getVar() {return propValList;}
| propValList = yailPrims() {return propValList;}
}

/*
 * Non-Terminal for Making new Lists
 */
ArrayList makeList() :
{
  ArrayList paramList = new ArrayList(); 
  String type = "YailList"; 
  ArrayList propValObject;
}
{
  < MAKELIST > < LPAREN > (< LIST > | < LISTFORRUNTIME >
      (propValObject = propVal(true)
      {if(propValObject.size() > 1) {paramList.add(propValObject);} else {paramList.add(propValObject.get(0));}
        })*)
       < RPAREN > < APOS > < LPAREN > (< COMPNAME >)*< RPAREN > < LISTINIT >
  {
    paramList.add(type);
    return paramList;
  }
}

/*
 * Non-Terminal for Operator blocks
 */
ArrayList opBlock() :
{
  ArrayList paramList = new ArrayList(); 
  String type = "YailList"; 
  ArrayList propValObject = new ArrayList();
  String operator; 
}
{
  operator = operation() propValObject = listParams() setPropType()
  {
    String leftSide = ((ArrayList)propValObject.get(0)).get(0).toString();
    String rightSide = ((ArrayList)propValObject.get(1)).get(0).toString();
    paramList.add(leftSide + operator + rightSide);
    paramList.add("float");
    return paramList;
  }
}

/*
 * Non-Terminal for operators
 */
String operation() : 
{
  Token operator; 
  Token equal = null;
}
{
  < DIVIDE > {return "/";} 
| operator = < PLUS > {return operator.image;}
| operator = < MINUS > {return operator.image;}
| operator = < YAILEQUAL > {return "==";}
| operator = < MULTIPLY > {return operator.image;}
| operator = < LESS > (equal = < EQUAL >)? {if(equal != null) return operator.image+equal.image; else return operator.image;}
| operator = < GREATER > (equal = < EQUAL >)? {if(equal != null) return operator.image+equal.image; else return operator.image;}
}

/*
 * Non-Terminal for the name of block the primitive corresponds to
 */
void primName() :
{
  Token functionName;
}
{
  functionName = < ANYTEXT >
|
  {}
}

/*
 * Program Starts Here!
 */
void program() :
{}
{
  headers() defs() compDefs() < EOF >
}

/*
 * Non-Terminal for property values
 */
//Return type is ArrayList because a property value could be any type (List or String or Number)
ArrayList propVal(boolean inList) : //possible property values
{
  Token propertyValue; 
  ArrayList propValList = new ArrayList(); 
  ArrayList tempList;
}
{
  propertyValue = < ANYTEXT > {propValList.add(propertyValue.image); if(!inList) propValList.add("String"); return propValList;}
| propertyValue = < COLORVAL > {propValList.add(propertyValue.image); if(!inList) propValList.add("String"); return propValList;}
| propertyValue = < DECIMALVAL > {propValList.add(propertyValue.image); if(!inList) propValList.add("float"); return propValList;}
| propertyValue = < TRUE > {propValList.add("true"); if(!inList) propValList.add("boolean"); return propValList;}
| propertyValue = < RUNTIMEVAL > {propValList.add("false"); if(!inList) propValList.add("boolean"); return propValList;}
| propertyValue = getVar() {propValList.add(propertyValue.image); if(!inList) propValList.add("String"); return propValList;}
| < LPAREN > tempList = propValS(inList) < RPAREN > {return tempList;} 
}

/*
 * Non-Terminal for property values starting with "("
 */
ArrayList propValS(boolean inList) :
{
  ArrayList propValObject = new ArrayList(); 
  Token propertyValue; 
  String propString;
}
{
  propValObject = callComponents() {return propValObject;}
| propValObject = getProp(true) {return propValObject;}
| propertyValue = getVar() {propValObject.add(propertyValue.image); if(!inList) propValObject.add("String"); return propValObject;}
| ifBlock() {return null;}
| propValObject = yailPrims() {return propValObject;}
| (propString = getVarPropSpecial())+ {propValObject.add(propString); if(!inList) propValObject.add("String"); return propValObject;}
}

/*
 * Non-Terminal for special case property values
 */
String getVarPropSpecial() :
{
  Token listName = null; 
  ArrayList argsList = new ArrayList(); 
  ArrayList propValObject;
}
{
  < LPAREN > (listName = getVariables(false) | getProp(false) | propValObject = variables() ) < RPAREN >
  (argsList = propVal(false) )*
  {
    return listName + "("+argsList.get(0).toString() + ")";
  }
}

/*
 * Non-Terminal for random integers
 */
ArrayList random() :
{
  ArrayList paramList = new ArrayList(); 
  boolean randInt; 
  ArrayList propValObject = new ArrayList();
}
{
  randInt = randoms() paramList = listParams() setPropType()
  {
    if(randInt)
    {
      String arg0 = ((ArrayList)paramList.get(0)).get(0).toString();
      String arg1 = ((ArrayList)paramList.get(1)).get(0).toString();
      propValObject.add("random.nextInt("+arg1+"-"+arg0+")"+"+"+arg0);
    	return propValObject;
    }
    else
    {
      propValObject.add("Math.random()");
      return propValObject;
    }
  }
}

/*
 * Non-Terminal for random blocks
 */
boolean randoms() :
{}
{
  < RANDINT > 
  {
    if(!hasRandom)
  	{
     JVar jvar = new JVar("random");
     jvar.setType("Random");
     variables.add(jvar);
     hasRandom = true;
   	}
   	return true;
  }
| < RANDFRAC > {return false;}
}

/*
 * Terminal for "require <com.google.youngandroid.runtime>"
 */
void requires() : 
{}
{
  < LPAREN > < REQUIRE > < PACKAGE > < RPAREN >
}

/*
 * Non-Terminal for set-and-coerce-property!
 */
void setProp() : 
{
  Token compName; 
  Token propName; 
  Token propType; 
  String propertyName; 
  Object propertyValue;
}
{
  < SETPROP > compName = < PROPNAME > propName = < PROPNAME >
  propertyValue = propVal(true) 
      < PROPTYPE >
  { 
    if(components.containsKey(compName.image.replace("'","")) && codeBlock == null)
    {
      AppComponent appComponent = components.get(compName.image.replace("'",""));
      propertyName = propName.image.replace("'", "");
      appComponent.setProperties(propertyName, ((ArrayList)propertyValue).get(0).toString());
    }
    else if(codeBlock != null)
    {  
      ComponentCall compCall = new ComponentCall(compName.image.replace("'",""));
      compCall.setMethod(propName.image.replace("'", ""));
      if(((ArrayList)propertyValue).size() > 2)
      	compCall.setArgs((ArrayList)propertyValue);
      else
        compCall.addArgument(((ArrayList)propertyValue).get(0).toString());
      codeBlock.addCall(compCall); 
    }
  }
}

/*
 * Non-Terminal for type of propVals being set "'(...)""
 */
void setPropType() :
{}
{
  < APOS > < LPAREN >
  ( < COMPNAME > | < LIST >)*
  < RPAREN >
}

/*
 * Non-Terminal for set-this-form
 */
void setThisForm() :
{}
{
 < SETTHISFORM > 
}

/*
 * Non-Terminal for set-var!
 */
void setVariables() : //set-var!
{
  JVar jVar; 
  Token varName; 
  ArrayList propValList;
}
{
  < SETVAR > varName = < COMPNAME > propValList = propVal(false)
  {
    jVar = new JVar(varName.image); jVar.setVal(propValList.get(0).toString());
    ComponentCall componentCall = new ComponentCall("assignment","");
    if(codeBlock != null)
    {
      codeBlock.addCall(componentCall);
      codeBlock.addAssignment(jVar);
    }
  }
}

/*
 * Non-Terminal for string-append block
 */
ArrayList stringAppend() : //string-append block
{
  ArrayList paramList; 
  ArrayList propValObject = new ArrayList();
}
{
  < STRAPPEND > paramList = listParams() setPropType()

  {
    StringBuffer appendTo = new StringBuffer();
    for(int i = 0; i < paramList.size(); i++)
    {
      if(i == 0)
      {
        appendTo.append(((ArrayList)paramList.get(i)).get(0).toString());
      }
      else
      {
        appendTo.append(" + " + ((ArrayList)paramList.get(i)).get(0).toString());
      }
    }
    propValObject.add(appendTo.toString());
    return propValObject;
  }
}

/*
 * Non-Terminal for string-contains?
 */
ArrayList stringContains() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRCONTAINS > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".contains(" + ((ArrayList)temp.get(1)).get(0) + ")");
    return propVal;
  }
}

/*
 * Non-Terminal for string-empty?
 */
ArrayList stringEmpty() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STREMPTY > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((String)(((ArrayList)temp.get(0)).get(0))) + ".length() < 1");
    return propVal;
  }
}

/*
 * Non-Terminal for string-split-at-any
 */
ArrayList stringGreater() : //string-split-at-any
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRGREATER > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".compareTo(" + ((ArrayList)temp.get(1)).get(0) + ") > 0");
    return propVal;
  }
}

/*
 * Non-Terminal for string length block
 */
ArrayList stringLegth() : 
{
  ArrayList paramList; 
  ArrayList propValObject = new ArrayList();}
{
  < STRLEN > paramList = listParams() setPropType()
  {
    propValObject.add(((ArrayList)paramList.get(0)).get(0) + ".length()");
    return propValObject;
  }
}

/*
 * Non-Terminal for string-split-at-any
 */
ArrayList stringLess() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRLESS > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".compareTo(" + ((ArrayList)temp.get(1)).get(0) + ") < 0");
    return propVal;
  }
}

/*
 * Non-Terminal for string replace all
 */
ArrayList stringReplaceAll() : //string replace all
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRREPLACEALL > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".replaceAll(" + ((ArrayList)temp.get(1)).get(0) + "," + ((ArrayList)temp.get(2)).get(0) + ")");
    return propVal;
  }
}

/*
 * Non-Terminal for string-substring
 */
ArrayList stringSegment() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSUBSTRING > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".substring(" + ((ArrayList)temp.get(1)).get(0) + "-1 ,"+((ArrayList)temp.get(2)).get(0)+"+"+((ArrayList)temp.get(1)).get(0)+"-1)");
    return propVal;
  }
}

/*
 * Non-Terminal for string-split
 */
ArrayList stringSplit() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSPLIT > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0) + ".split(" + ((ArrayList)temp.get(1)).get(0) + ")");
    return propVal;
  }
}

/*
 * Non-Terminal for string-split-at-any
 */
ArrayList stringSplitAtAny() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSPLITANY > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add("YailList.makeList(" + ((ArrayList)temp.get(0)).get(0) + ".split(" + ((ArrayList)temp.get(1)).get(0) + ".replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\"|\")"+"))");
    return propVal;
  }
}

/*
 * Non-Terminal for string-split-at-first
 */
ArrayList stringSplitAtFirst() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSPLITFIRST > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add("YailList.makeList("+((ArrayList)temp.get(0)).get(0)+".split(\""+((ArrayList)temp.get(1)).get(0)+"\", 2))");

    return propVal;
  }
}

/*
 * Non-Terminal for string-split-at-any
 */
ArrayList stringSplitFirstAny() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSPLITFIRSTANY > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add("YailList.makeList("+((ArrayList)temp.get(0)).get(0)+".split("+((ArrayList)temp.get(1)).get(0)+".replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\"|\")"+"))");
    return propVal;
  }
}

/*
 * Non-Terminal for split-spaces
 */
ArrayList stringSplitSpaces() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSPLITSPACES > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add("YailList.makeList("+((ArrayList)temp.get(0)).get(0)+".split(\"\\s+\"))");
    return propVal;
  }
}

/*
 * Non-Terminal for string-starts-at
 */
ArrayList stringStartsAt() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRSTARTAT > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0)+".indexOf("+((ArrayList)temp.get(1)).get(0)+")+1");
    return propVal;
  }
}

/*
 * Non-Terminal for string-trim
 */
ArrayList stringTrim() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRTRIM > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add(((ArrayList)temp.get(0)).get(0)+".trim()");
    return propVal;
  }
}

/*
 * Non-Terminal for string to lower case
 */
ArrayList stringToLower() :
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRTOLOWER > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add((((ArrayList)temp.get(0)).get(0)) + ".toLowerCase()");
    return propVal;
  }
}

/*
 * Non-Terminal for string to upper case
 */
ArrayList stringToUpper() : 
{
  ArrayList temp = new ArrayList();
  ArrayList propVal = new ArrayList();
}
{
  < STRTOUPPER > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    propVal.add((((ArrayList)temp.get(0)).get(0)) + ".toUpperCase()");
    return propVal;
  }
}

/*
 * Non-Terminal for variable definitions
 */
void varDef() :
{
  JVar var; 
  Token varName; 
  ArrayList propValList;
}
{
  varName = < COMPNAME >
  {
    var = new JVar(varName.image);
  }
  propValList = propVal(false)
  {	
    if( ((String) propValList.get(propValList.size()-1)).equals("YailList"))
    {
      var.setType((String) propValList.get(propValList.size()-1));
      propValList.remove(propValList.size()-1);
      var.setMembers(propValList);
    }
    else
    {
      var.setVal(propValList.get(0).toString());
      var.setType(propValList.get(1).toString());
      propValList.remove(1);
    }
  }
  {
    variables.add(var);
  }
}

/*
 * Non-Terminal for local variable blocks?
 */
ArrayList variables() : 
{
  Token val; 
  ArrayList propValList = new ArrayList();
}
{
  < LEXVAL > (val = < COMPNAME > | val = < LIST >)
  {
    propValList.add(val.image); 
    return propValList;
  }
}

/*
 * Non-Terminal for lexical-value <COMPNAME> 
 */
ArrayList compVal() : 
{
  Token val; 
  ArrayList propValList = new ArrayList(); 
}
{
  < LEXVAL > val = < COMPNAME >
  {
    propValList.add(val.image); 
    return propValList;
  }
}

/*
 * Non-Terminal for control-choose blocks
 */
void yailControlChoose() :
{}
{
  ifBlock() < LPAREN > listStuff() < RPAREN > setPropType()
}

/*
 * Non-Terminal for control-close app
 */
void yailControlCloseApp() :
{
  ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("finishApplication");
}
{
  < CLOSEAPP > < LPAREN > listStuff() < RPAREN > setPropType()
  {
    codeBlock.addCall(componentCall);
  }
}

/*
 * Non-Terminal for control- close screen
 */
void yailControlCloseScreen() :
{ ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("finishActivity");}
{
  < CLOSESCREEN > < LPAREN > listStuff() < RPAREN > setPropType()
  {codeBlock.addCall(componentCall);}
}

/*
 * Non-Terminal for control- close screen plain text
 */
void yailControlCloseScreenPlainText() :
{ ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("finishActivityWithResult"); ArrayList paramList = null;}
{
  < CLOSESCREENPLAINTEXT > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
   {componentCall.setArgs(paramList); codeBlock.addCall(componentCall);}
}

/*
 * Non-Terminal for control-close screen with value 
 */
void yailControlCloseScreenWithValue() :
{ ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("finishActivityWithResult"); ArrayList paramList = null;}
{
  < CLOSESCREENWITHVALUE > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {componentCall.setArgs(paramList); codeBlock.addCall(componentCall);}
}

/*
 * Non-Terminal for control- get plain start text
 */
void yailControlGetPlainStartText() :
{}
{
  < GETPLAINSTARTTEXT > < LPAREN > listStuff() < RPAREN > setPropType()
}

/*
 * Non-Terminal for control- get start value 
 */
void yailControlGetStartValue() :
{}
{
  < GETSTARTVALUE > <LPAREN > listStuff() < RPAREN > setPropType()
}

/*
 * Non-Terminal for control- open another screen with value
 */
void yailControlOpenAnotherScreenWithValue() :
{ ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("switchFormWithStartupValue"); ArrayList paramList = null;}
{
  < OPENANOTHERSCREENWITHVALUE > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {componentCall.setArgs(paramList); codeBlock.addCall(componentCall);}
}

/*
 * Non-Terminal for control- while block
 */
void yailControlWhile() :
{ 
  String operator; 
  CodeBlock mainBlock = codeBlock; 
}
{
  {
    mainBlock.addCall(new ComponentCall("while", "")); 
    codeBlock = new CodeBlock("while"); 
  }
  < WHILE > operator = ifTest() beginBody()
  {
    mainBlock.addWhile(new WhileLoop(operator,codeBlock)); 
    codeBlock = mainBlock;
  }
}

/*
 * Non-Terminal for list - get item
 */
ArrayList yailGetListItem() :
{
  ArrayList paramList = new ArrayList();
  ArrayList propValObject;
}
{
  < YAILGETITEM > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add(((ArrayList)propValObject.get(0)).get(0) + ".getItems().indexOf(" + ((ArrayList)propValObject.get(1)).get(0) + " - 1)");
    return paramList;
  }
}

/*
 * Non-Terminal for list - is list
 */
ArrayList yailIsList() : 
{
  ArrayList paramList = new ArrayList();
  ArrayList propValObject;
}
{
  < YAILISALIST > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add(((ArrayList)propValObject.get(0)).get(0) + ".getClass().getName().contentEquals(\"YailList\")");
    return paramList;
  }
}

/*
 * Non-Terminal for list add to list
 */
ArrayList yailListAddToList() : 
{
  ArrayList paramList = new ArrayList();
  ArrayList<ComponentCall > compArray = new ArrayList<ComponentCall >();
  Token compName;
}
{
  < YAILADDTOLIST > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {
    ComponentCall compCall = new ComponentCall (((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    compCall.addArgument(((ArrayList)paramList.get(1)).get(0).toString());
    compCall.setMethod("add");
    ComponentCall compCall1 = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString());
    compCall1.setMethod("setItems");
    compCall1.addArgument(((ArrayList)paramList.get(0)).get(0).toString()+ "IL");
    codeBlock.addCall(compCall);
    codeBlock.addCall(compCall1);
    return paramList;
 }
}

/*
 * Non-Terminal for list remove 
 */
ArrayList yailListRemove() :
{
  ArrayList paramList = new ArrayList();
  ArrayList<ComponentCall > compArray = new ArrayList<ComponentCall >();
  Token compName;
}
{
  compName = < YAILLISTREMOVE > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  { 
    ComponentCall compCall= new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    compCall.addArgument(((ArrayList)paramList.get(1)).get(0).toString());
    compCall.setMethod("remove");
    ComponentCall compCall1 = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString());
    compCall1.setMethod("setItems");
    compCall1.addArgument(((ArrayList)paramList.get(0)).get(0).toString()+ "IL");
    codeBlock.addCall(compCall);
    codeBlock.addCall(compCall1);
    return paramList;
  }
}

/*
 * Non-Terminal for list set item
 */
void yailListSetItem() : 
{
  ArrayList paramList = new ArrayList();
  Token compName;
}
{
  compName = < YAILLISTSETITEM > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  { 
    ComponentCall compCall = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    compCall.addArgument(((ArrayList)paramList.get(1)).get(0).toString() + "-1");
    compCall.addArgument(((ArrayList)paramList.get(2)).get(0).toString());
    compCall.setMethod("set");
    ComponentCall compCall1 = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString());
    compCall1.setMethod("setItems");
    compCall1.addArgument(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    codeBlock.addCall(compCall);
    codeBlock.addCall(compCall1);
  }
}

/*
 * Non-Terminal for list insert 
 */
void yailListInsert() : 
{
  ArrayList paramList = new ArrayList();
  ArrayList<ComponentCall > compArray = new ArrayList<ComponentCall >();
  Token compName;
}
{
  compName = < YAILLISTINSERT > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {
    ComponentCall compCall = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    compCall.addArgument(((ArrayList)paramList.get(1)).get(0).toString() + "-1");
    compCall.addArgument(((ArrayList)paramList.get(2)).get(0).toString());
    compCall.setMethod("add");
    ComponentCall compCall1 = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString());
    compCall1.setMethod("setItems");
    compCall1.addArgument(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    codeBlock.addCall(compCall);
    codeBlock.addCall(compCall1);
  }
}

/*
 * Non-Terminal for list append 
 */
ArrayList yailListAppend() : 
{
  ArrayList paramList = new ArrayList();
  ArrayList<ComponentCall > compArray = new ArrayList<ComponentCall >();
  Token compName;
}
{
  compName = < YAILLISTAPPEND > <LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {
    ComponentCall compCall= new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString() + "IL");
    compCall.addArgument(((ArrayList)paramList.get(1)).get(0).toString() + "IL");
    compCall.setMethod("addAll");
    ComponentCall compCall1 = new ComponentCall(((ArrayList)paramList.get(0)).get(0).toString());
    compCall1.setMethod("setItems");
    compCall1.addArgument(((ArrayList)paramList.get(0)).get(0).toString());
    codeBlock.addCall(compCall);
    codeBlock.addCall(compCall1);
    return paramList;
  }
}

/*
 * Non-Terminal for list copy 
 */
ArrayList yailListCopy() : 
{
  ArrayList propValObject;
}
{
  < YAILLISTCOPY > <LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    ComponentCall compCall= new ComponentCall("YailList.makeList");
    compCall.setMethod("getItems");
    compCall.addArgument(((ArrayList)propValObject.get(0)).toString());
    codeBlock.addCall(compCall);

    return propValObject;
  }
}

/*
 * Non-Terminal for list from csv row
 */
ArrayList yailListFromCsvRow() : 
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTFROMCSVROW > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add("CsvUtil.fromCsvRow(YailList.makeList(" + ((ArrayList)propValObject.get(0)).get(0)+ ".getItems()))");
    return paramList;
  }
}

/*
 * Non-Terminal for list from csv table
 */
ArrayList yailListFromCsvTable() : 
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTFROMCSVTABLE> < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add("CsvUtil.fromCsvTable(YailList.makeList(" + ((ArrayList)propValObject.get(0)).get(0) + ".getItems()))");
    return paramList;
  }
}

/*
 * Non-Terminal for list index
 */
ArrayList yailListInd() : 
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTINDEX > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add(((ArrayList)propValObject.get(1)).get(0) + ".getItems().indexOf(" + ((ArrayList)propValObject.get(0)).get(0)+ ")");
    return (ArrayList)propValObject.get(0);
  }
}

/*
 * Non-Terminal for list length
 */
ArrayList yailListLength() :
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTLENGTH > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    /* test comment please ignore */
    paramList.add(((ArrayList)propValObject.get(0)).size() - 1);
    return paramList;
  }
}

/*
 * Non-Terminal for list member
 */
ArrayList yailListMember() :
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTMEMBER > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add( ((ArrayList)propValObject.get(1)).get(0) + ".getItems().contains(" + ((ArrayList)propValObject.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for list pick random
 */
ArrayList yailListPickRandom() :
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTRANDOM > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    JVar jvar = new JVar("random");
    jvar.setType("Random");
    variables.add(jvar);

    JVar jvar2 = new JVar("array");
    jvar2.setType("ArrayList");
    variables.add(jvar2);

    for(int i = 0; i < ((ArrayList)propValObject.get(0)).size()-1; i++)
    {
      ComponentCall compCall= new ComponentCall("array");
      compCall.setMethod("add");
      compCall.addArgument(((ArrayList)propValObject.get(0)).get(i).toString());
      codeBlock.addCall(compCall);
    }

    paramList.add("array.get(Math.Random().getInt(array.size())");
    return paramList;
  }
}

/*
 * Non-Terminal for list to csv row
 */
ArrayList yailListToCsvRow() : 
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTTOCSVROW > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add("CsvUtil.toCsvRow(YailList.makeList(" + ((ArrayList)propValObject.get(0)).get(0) + ".getItems()))");
    return paramList;
  }
}

/*
 * Non-Terminal for list to csv table
 */
ArrayList yailListToCsvTable() : 
{
  ArrayList paramList = new ArrayList();
  String type = "YailList";
  ArrayList propValObject;
}
{
  < YAILLISTTOCSVTABLE > < LPAREN > propValObject = listStuff() < RPAREN > setPropType()
  {
    paramList.add("CsvUtil.toCsvTable(YailList.makeList(" + ((ArrayList)propValObject.get(0)).get(0) + ".getItems()))");
    return paramList;
  }
}

/*
 * Non-Terminal for math absolute value
 */
ArrayList yailMathAbs() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ABS > < LPAREN> temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.abs((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math acos
 */
ArrayList yailMathAcos() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ACOS > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.acos((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math atan
 */
ArrayList yailMathAtan() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ATAN > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.atan((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math atan2
 */
ArrayList yailMathAtan2() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ATAN2 > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.atan2((float)" + ((ArrayList)temp.get(0)).get(0) + ",(float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math asin
 */
ArrayList yailMathAsin() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ASIN > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.asin((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math ceiling
 */
ArrayList yailMathCeiling() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < CEILING > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.ceil((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math converting from radians to degrees
 */
ArrayList yailMathConvertToDeg():
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < CONVRADITODEG > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.toDegrees((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math converting from degrees to radians
 */
ArrayList yailMathConvertToRad() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < CONVDEGTORADI > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.toRadians((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math cos 
 */
ArrayList yailMathcos() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < COS > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.cos((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math exponents
 */
ArrayList yailMathExp() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < EXP > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.exp((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math raising powers 
 */
ArrayList yailMathExpt() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < EXPT > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.pow((float)" + ((ArrayList)temp.get(0)).get(0) + ", (float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for floor 
 */
ArrayList yailMathFloor() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < FLOOR > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.floor((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math formating decimals
 */
ArrayList yailMathFormatAsDec() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < FORMATASDEC > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {

    paramList.add("new Double (String.format(\"%."+ ((ArrayList)temp.get(1)).get(0) +"g%n\", "+((ArrayList)temp.get(0)).get(0)+"))");
    return paramList;
  }
}

/*
 * Non-Terminal for math is this a number?
 */
ArrayList yailMathIsANum() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ISANUM > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("\"" + ((ArrayList)temp.get(0)).get(0) + "\"" + ".replaceAll(\"\\d+(.\\d+)*\", \"\").length()<1");
    return paramList;
  }
}

/*
 * Non-Terminal for math log
 */
ArrayList yailMathLog() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < LOG > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.log((float)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math max
 */
ArrayList yailMathMax() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < MAX > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.max((float)" + ((ArrayList)temp.get(0)).get(0) + ", (float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math min 
 */
ArrayList yailMathMin() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < MIN > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.min((float)" + ((ArrayList)temp.get(0)).get(0) + ", (float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math modulo
 */
ArrayList yailMathMod() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < MOD > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("(float)" + ((ArrayList)temp.get(0)).get(0) + " % " + "(float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math negating
 */
ArrayList yailMathNegate() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < MINUS > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("(double)" + ((ArrayList)temp.get(0)).get(0) + "* -1");
    return paramList;
  }
}

/*
 * Non-Terminal for math quotient
 */
ArrayList yailMathQuotient() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < QUOTIENT > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("(float)" + ((ArrayList)temp.get(0)).get(0) + " / " + "(float)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math random number with seed
 */
ArrayList yailMathRandomSeed() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < RANDOMSETSEED > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    if(!hasRandom)
    {
     JVar jvar = new JVar("random");
     jvar.setType("Random");
     variables.add(jvar);
     hasRandom = true;

    }
    paramList.add("random.setSeed((double)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math remainders
 */
ArrayList yailMathRemainder() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < REMAINDER > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.IEEEremainder((double)" + ((ArrayList)temp.get(0)).get(0) + ", (double)" + ((ArrayList)temp.get(1)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math rounding 
 */
ArrayList yailMathRound() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < ROUND > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.round((double)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math sin
 */
ArrayList yailMathsin() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < SIN > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.sin((double)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math square roots
 */
ArrayList yailMathSqrt() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < SQUAREROOT > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.sqrt((double)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for math tangent
 */
ArrayList yailMathtan() :
{
  ArrayList temp = new ArrayList();
  ArrayList paramList = new ArrayList();
}
{
  < TAN > < LPAREN > temp = listStuff() < RPAREN > setPropType()
  {
    paramList.add("Math.tan((double)" + ((ArrayList)temp.get(0)).get(0) + ")");
    return paramList;
  }
}

/*
 * Non-Terminal for control open another scren
 */
void yailControlOpenAnotherScreen() :
{ ComponentCall componentCall = new ComponentCall("Form");
  componentCall.setMethod("switchForm"); ArrayList paramList = null;}
{
  < OPENANOTHERSCREEN > < LPAREN > paramList = listStuff() < RPAREN > setPropType()
  {componentCall.setArgs(paramList); codeBlock.addCall(componentCall);}
}

/*
 * Non-Terminal for all yail primatives
 */
ArrayList yailPrim() : //possible yail primitives
{
  ArrayList propValObject = new ArrayList();
}
{
  propValObject = makeList() {return propValObject;}
| propValObject = yailListRemove() {return propValObject;}
| propValObject = random() {return propValObject;}
| propValObject = stringAppend() {return propValObject;}
| propValObject = stringContains() {return propValObject;}
| propValObject = stringEmpty() {return propValObject;}
| propValObject = stringGreater() {return propValObject;}
| propValObject = stringLegth() {return propValObject;}
| propValObject = stringLess() {return propValObject;}
| propValObject = stringToLower() {return propValObject;}
| propValObject = stringReplaceAll() {return propValObject;}
| propValObject = stringSegment() {return propValObject;}
| propValObject = stringSplit() {return propValObject;}
| propValObject = stringSplitAtAny() {return propValObject;}
| propValObject = stringSplitAtFirst() {return propValObject;}
| propValObject = stringSplitFirstAny() {return propValObject;}
| propValObject = stringSplitSpaces() {return propValObject;}
| propValObject = stringStartsAt() {return propValObject;}
| propValObject = stringTrim() {return propValObject;}
| propValObject = stringToUpper() {return propValObject;}
| propValObject = yailGetListItem() {return propValObject;}
| propValObject = yailIsList() {return propValObject;}
| propValObject = yailListAddToList() {return propValObject;}
| propValObject = yailListAppend() {return propValObject;}
| propValObject = opBlock() {return propValObject;}
| yailControlCloseApp() {return propValObject;}
| yailControlChoose() {return propValObject;}
| yailControlCloseScreen() {return propValObject;}
| yailControlCloseScreenPlainText() {return propValObject;}
| yailControlCloseScreenWithValue() {return propValObject;}
| yailControlOpenAnotherScreen() {return propValObject;}
| yailControlOpenAnotherScreenWithValue() {return propValObject;}
| yailControlWhile() {return propValObject;}
| propValObject = yailListCopy() {return propValObject;}
| propValObject = yailListInd() {return propValObject;}
| yailListInsert() {return propValObject;}
| propValObject = yailListLength() {return propValObject;}
| propValObject = yailListMember() {return propValObject;}
| propValObject = yailListPickRandom() {return propValObject;}
| yailListSetItem() {return propValObject;}
| propValObject = yailListFromCsvRow() {return propValObject;}
| propValObject = yailListFromCsvTable() {return propValObject;}
| propValObject = yailListToCsvRow() {return propValObject;}
| propValObject = yailListToCsvTable() {return propValObject;}
| propValObject = yailMathAbs()  {return propValObject;}
| propValObject = yailMathAtan() {return propValObject;}
| propValObject = yailMathAtan2() {return propValObject;}
| propValObject = yailMathAcos() {return propValObject;}
| propValObject = yailMathAsin() {return propValObject;}
| propValObject = yailMathCeiling() {return propValObject;}
| propValObject = yailMathConvertToDeg() {return propValObject;}
| propValObject = yailMathConvertToRad() {return propValObject;}
| propValObject = yailMathcos() {return propValObject;}
| propValObject = yailMathExp() {return propValObject;}
| propValObject = yailMathExpt() {return propValObject;}
| propValObject = yailMathFloor() {return propValObject;}
| propValObject = yailMathFormatAsDec() {return propValObject;}
| propValObject = yailMathIsANum() {return propValObject;}
| propValObject = yailMathLog() {return propValObject;}
| propValObject = yailMathMax() {return propValObject;}
| propValObject = yailMathMin() {return propValObject;}
| propValObject = yailMathMod() {return propValObject;}
| propValObject = yailMathsin() {return propValObject;}
| propValObject = yailMathQuotient() {return propValObject;}
| propValObject = yailMathRandomSeed() {return propValObject;}
| propValObject = yailMathRemainder() {return propValObject;}
| propValObject = yailMathRound() {return propValObject;}
| propValObject = yailMathSqrt() {return propValObject;}
| propValObject = yailMathtan() {return propValObject;} 

}

/*
 * Non-Terminal for calling yail primitives
 */
ArrayList yailPrims() : //call to yail primitives
{
  ArrayList propValObject = null;
}
{
  < CALLPRIM > propValObject = yailPrim() primName() {return propValObject;}
| < YAILEQUAL > < LPAREN > compVal() < RPAREN > < LPAREN > compVal() < RPAREN > {return propValObject;}
| propValObject = variables() {return propValObject;}
}


/*
 * Non-Terminal for building a look up table
 */
void buildTable() :
{}
{
  {
    ArrayList<String > values = new ArrayList();
    values.add("Form");
    values.add("switchForm");
    lookUps.put("open-another-screen", values);
    values = new ArrayList();
    values.add("argsIL");
    values.add("remove");
    values.add("args");
    values.add("setItems");
    lookUps.put("yail-list-remove-item!", values);
  }
}

/*
 * create strings of code to return
 */
String generateCodeString(String yailType, String value) :
{}
{
  {
    if(yailType.equals("abs")) return "Math.abs(" + value + ")";
    return null;
  }
}

HashMap<String, AppComponent > getComponents() :
{}
{
  {return components;}
}

ArrayList<CodeBlock> getEvents() :
{}
{
  {return events;}
} 

String getPackageName() :
{}
{
  {return packageName;}
}

ArrayList<JVar> getVariablesArray() :
{}
{
  {return variables;}
}

ArrayList<Method> getMethods() :
{}
{
  {return methods;}
}